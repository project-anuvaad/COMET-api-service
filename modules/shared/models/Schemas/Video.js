const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const { SchemaNames } = require('./utils/schemaNames');


const CONVERT_STATUS_ENUM = ['uploading', 'uploaded', 'transcriping', 'automated_cutting', 'cutting', 'proofreading', 'converting', 'failed', 'done'];

const VideoSchema = new Schema({
    url: { type: String },
    compressedVideoUrl: { type: String },

    title: { type: String },
    langCode: { type: String },
    numberOfSpeakers: { type: Number },
    organization: { type: Schema.Types.ObjectId, index: true, ref: SchemaNames.organization },
    folder: { type: Schema.Types.ObjectId, index: true, ref: SchemaNames.folder },
    article: { type: Schema.Types.ObjectId, ref: SchemaNames.article },
    Key: { type: String },
    duration: Number,
    uploadedBy: { type: Schema.Types.ObjectId, ref: SchemaNames.user, },
    canAITranscribe: { type: Boolean },
    
    subtitle: String,
    withSubtitle: Boolean,
    subtitleType: String,

    audioUrl: { type: String },

    thumbnailLoading: { type: Boolean, default: false },
    thumbnailUrl: { type: String },

    backgroundMusicUrl: { type: String },
    backgroundMusicKey: { type: String },

    extractBackgroundMusicLoading: { type: Boolean, default: false },
    extractBackgroundMusicBy: { type: Schema.Types.ObjectId, ref: SchemaNames.user, },
    // Wether the background was generated by spleeter or not
    backgroundMusicTransposed: { type: Boolean, default: false },

    // the user who issued the final convert for the proofread
    convertedBy: { type: Schema.Types.ObjectId, ref: SchemaNames.user },

    reviewers: [{ type: Schema.Types.ObjectId, ref: SchemaNames.user, }],
    verifiers: [{ type: Schema.Types.ObjectId, ref: SchemaNames.user, }],
    projectLeaders: [{ type: Schema.Types.ObjectId, ref: SchemaNames.user, }],
    transcriptionUrl: { type: String },
    transcriptionScriptUrl: { type: String },
    transcriptionScriptContent: { type: String, select: false },

    reviewCompleted: { type: Boolean, default: false },
    jobName: { type: String }, // AWS Transcribe job name
    transcripingProgress: { type: Number, default: 0 },
    convertingProgress: { type: Number, default: 0 },
    convertStartTime: { type: Number },
    convertEndTime: { type: Number },
    status: { type: String, enum: CONVERT_STATUS_ENUM, default: 'uploading' },

    cuttingRequestBy: { type: Schema.Types.ObjectId, ref: SchemaNames.user, },
    cuttingBy: { type: String, enum: ['self', 'comet'], default: 'self' },
    cuttingStartTime: { type: Number },
    cuttingEndTime: { type: Number },

    AITranscriptionLoading: { type: Boolean, default: false },
    transcribeStartTime: { type: Number },
    transcribeEndTime: { type: Number },

    created_at: { type: Date, default: Date.now, index: true },
})



module.exports = { VideoSchema };